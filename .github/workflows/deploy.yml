name: Deploy to EC2

on:
  push:
    branches: [main]

env:
  # Docker 관련 설정
  DOCKER_IMAGE_NAME: random-trip-app
  DOCKER_CONTAINER_NAME: random-trip-app-container
  HOST_PORT: 80
  CONTAINER_PORT: 80
  
  # 배포 경로
  APP_PATH: /home/${{ secrets.EC2_USERNAME }}/app
  
  # 제외할 파일/디렉토리 목록 (순서 중요!)
  EXCLUDE_PATTERNS: |
    # 버전 관리 (가장 먼저 제외)
    .git
    .git/
    .git/**/*
    .github
    .github/
    .github/**/*
    .gitignore
    # 의존성
    **/node_modules
    # 테스트 관련
    **/tests
    **/__tests__
    **/*.test.js
    **/*.spec.js
    **/coverage
    # 개발 도구 설정
    **/.editorconfig
    **/.prettierrc
    **/.eslintrc*
    **/jest.config.js
    **/.husky
    # 문서
    **/README.md
    **/LICENSE
    **/docs
    # 기타
    **/*.log

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: CI_CD_KEYS

    steps:
      - uses: actions/checkout@v2

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: ${{ env.APP_PATH }}
          overwrite: true
          rm: true  # 기존 파일 제거
          strip_components: 0
          exclude: |
            **/.git*
            **/.git/**
            .gitignore
            .github/**

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ${{ env.APP_PATH }}
            
            echo "Building Docker image locally..."
            docker build \
              -t ${{ env.DOCKER_IMAGE_NAME }} . || exit 1
            
            # 이미지가 성공적으로 생성되었는지 확인
            if ! docker images | grep ${{ env.DOCKER_IMAGE_NAME }}; then
              echo "Failed to build Docker image"
              exit 1
            fi
            
            echo "Stopping existing container..."
            docker stop ${{ env.DOCKER_CONTAINER_NAME }} || true
            docker rm ${{ env.DOCKER_CONTAINER_NAME }} || true
            
            echo "Starting new container..."
            docker run -d \
              --name ${{ env.DOCKER_CONTAINER_NAME }} \
              -p 80:3000 \
              ${{ env.DOCKER_IMAGE_NAME }}
            
            # 컨테이너가 성공적으로 시작되었는지 확인
            if ! docker ps | grep ${{ env.DOCKER_CONTAINER_NAME }}; then
              echo "Container failed to start. Checking logs..."
              docker logs ${{ env.DOCKER_CONTAINER_NAME }}
              exit 1
            fi